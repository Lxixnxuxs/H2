
def showDigit(int a) -> void {
    putChar(a+48);
}

def recursivePrint(int a)-> void {
    if (a!=0) {
         int b = a % 10;
         a = a/10;
         recursivePrint(a);
         showDigit(b);
    } else {}
}

def print(int a)->void {
    if (a==0) {
        showDigit(0);
    } else {}

    recursivePrint(a);
}

def printLn(int a) -> void {
    print(a);
    putChar(10);
}

def printError(int a) -> void {
    putChar(69);
    putChar(114);
    putChar(114);
    putChar(111);
    putChar(114);
    putChar(58);
    putChar(32);
    printLn(a);
}

class Node [] {
    int value;
    Node next;

    def construct(int v) -> void {
        value = v;
    }

}

class List [size] {
    Node head;
    Node tail;
    int size;

    def constructList() -> void {
        Node dummy;
        dummy.construct(0);
        size = 0;
        head = dummy;
        tail = dummy;
    }

    def addLast(int v) -> void {
        Node n;
        n.construct(v);
        tail.next = n;
        tail = n;
        size = size + 1;
    }

    def popFirst() -> int {
        if (size <= 0) {printError(9901);} else {}
        /*return the error code for pop from empty list of bounds*/

        Node res = head.next;
        head = head.next;
        size = size - 1;
        return res.value;
    }

    def getNode(int nr) -> Node {
        if (nr >= size) {printError(9902);} else {}
            /*return the error code for out of bounds*/

        Node cur = head;
        while (nr>=0) {
            nr = nr - 1;
            cur = cur.next;
        }
        return cur;
    }

    def get(int nr) -> int {
        Node n = this.getNode(nr);
        return n.value;
    }

    def set(int nr, int value) -> void {
        Node n = getNode(nr);
        n.value = value;
    }
}


def printList(List l) -> void {
    putChar(91);
    if (l.size != 0){
    Node cur = l.head;
    while (cur != l.tail) {
        cur = cur.next;
        print(cur.value);
        putChar(32);

    }} else {}
    putChar(93);
    putChar(10);
}

def main() -> int {
    List l;
    l.constructList();
    l.addLast(5);
    addLast(l,7);
    l.addLast(9);

    putChar(10);
    l.printList();
}