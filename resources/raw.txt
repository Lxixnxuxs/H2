
def showDigit(int a) -> void {
    /*int a = (3 + 4) * (5 + 1);*/
    putChar(a+48);
}

def recursivePrint(int a, int basis)-> void {
    if (a!=0) {
         int b = a % basis;
         a = a/basis;
         recursivePrint(a, basis);
         showDigit(b);
    } else {}
}

def print(int a, int basis)->void {
    if (a==0) {
        showDigit (0);
    } else {}

    recursivePrint(a, basis);
}

def printDecimal(int a)->void {
    print(a, 10);
    putChar(10);
}

def printBinary(int a)->void {
    print(a, 2);
    putChar(10);
}


def printLn(int a) -> void {
    print(a,10);
    putChar(10);
}

def printError(int a) -> void {
    putChar(69);
    putChar(114);
    putChar(114);
    putChar(111);
    putChar(114);
    putChar(58);
    putChar(32);
    printLn(a);
}

class Node [] {
    int value;
    Node next;

    def construct(int v) -> void {
        value = v;
    }

}

class List [size] {
    Node head;
    Node tail;
    int size;

    def construct() -> void {
        Node dummy;
        dummy.construct(0);
        size = 0;
        head = dummy;
        tail = dummy;
    }

    def addLast(int v) -> void {
        Node n;
        n.construct(v);
        tail.next = n;
        tail = n;
        size = size + 1;
    }

    def popFirst() -> int {
        if (size <= 0) {printError(9901);} else {}
        /*return the error code for pop from empty list of bounds*/

        Node res = head.next;
        head = head.next;
        size = size - 1;
        return res.value;
    }

    def getNode(int nr) -> Node {
        if (nr >= size) {printError(9902);} else {}
            /*return the error code for out of bounds*/

        Node cur = head;
        while (nr>=0) {
            nr = nr - 1;
            cur = cur.next;
        }
        return cur;
    }

    def get(int nr) -> int {
        Node n = this.getNode(nr);
        return n.value;
    }

    def set(int nr, int value) -> void {
        Node n = getNode(nr);
        n.value = value;
    }

    def show() -> void {
        putChar(91);
        if (size != 0){
        Node cur = head;
        while (cur != tail) {
            cur = cur.next;
            printDecimal(cur.value);
            putChar(32);
        }} else {}
        putChar(93);
        putChar(10);
    }
}





class String [] {
    List storage;

    def show() -> void {
        int i = 0;
        while (i<storage.size){
            putChar(storage.get(i));
            i = i + 1;
        }

        putChar(10);
    }
}

def exp(int base, int exp_) -> int {
    int res = 1;
    while(exp_>0){
        exp_ = exp_ - 1;
        res = res * base;
    }
    return res;
}

class Double [] {
    int data;

    def toInt() -> int {
        int mantissa = data & 15;
        
        int exponent = (data >> 4) & 7;
        mantissa = mantissa * exp(10,exponent);
        return mantissa;
    }
}

def main() -> int {

    Double d;
    d.data = (3 << 4) + 6;
    printBinary(d.data);
    putChar(10);
    int r = d.toInt();
    putChar(10);
    printDecimal(r);

    /*List l;
    l.construct();
    l.addLast('H');
    l.addLast('a');
    l.addLast('l');
    l.addLast('l');
    l.addLast('o');
    l.show();

    String s;
    s.storage = l;

    s.show();
    putChar(10);*/


}