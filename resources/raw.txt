def t(int a) -> int /% _O(while_1) %/  {
    while (a<0) /% _O(while_1) %/  {
        if (a>9) {
            a = (a / 2);
        } else {
            a = (a - 1);
        }
    }
}


def h(int n) -> int /% _O(n) %/  {
    while (n>0) /% _O(n) %/  {
        n = (n - 1);
    }
}


def z(int n) -> void /% _O(log(n)) %/  {
    int i = n;
    int e = 0;
    while (i>0) /% _O(log(i)) %/  {
        i = (i / 2);
        e = (e + 1);
    }
    return e;
}


def f(int n) -> void /% _O(log(n)) %/  {
    if (n<=0) {
        return 1;
    } else {
        int res = h[n];
        res = (res + f[(n / 2)]);
        return res;
    }
}


def g(int a, int b) -> void /% _O(func_g) %/  {
    if ((a + b)<=0) {
        return 1;
    } else {
        int res = h[a];
        res = (res + g[(a - 1), b]);
        res = (res + g[(a - 1), (b - 1)]);
        return res;
    }
}


