/*
def g(int a int b) -> int {
    int res = 0;
    int i = 0;

    int d = a + b;
    while (i < d) {
            i = i + 1;
            int j = 0;
            while (j < a) {
                res = res + ( j * b );
            }
        }

    return res;
}*/

def f(int r) -> int {
    int res = 0;
    int i = r;
    while (0 < i) {
        res = res + i;
        i = i + 1;
    }
    return res;
}

def main() -> void {
    return f[4];
}



/*
def f(int x) -> int /% _O(INFINITY) %/  {
    return f[1];
}


def exp(int a) -> void /% _O(a) %/  {
    if (a<0) {
        return a;
    } else {
        return 2 * exp(a - 1);
    }
}


def g(int x) -> int /% _O((((2.000000)^(x)) * x) + x) %/  {
    if (x<5) {
        return z[x];
    } else {
        int _ = z[x];
        int _ = g[(x - 1)];
    }
    return g[(x - 1)];
}


def h(int x, int y) -> int /% _O((((y)^(2.000000)) * x) + y) %/  {
    if (y<0) {
        int _ = z[y];
        return 1;
    } else {
        int _ = z[(x * y)];
    }
    return h[(x - 1), (y - 1)];
}


*/

class Node [] {
    int value;
    Node next;

    def construct(int v)->void{
        value = v;
        next = 0;
    }
}

class List [length] {
    Node head = 0;
    Node tail = 0;

    def construct()->void{
        head = tail;
        head.constructor(0);
    }

    def append(Node n)->void{
        tail.next = n;
        tail = n;
    }

    def wrap_append(int v)->void{
        Node n;
        n.constructor(v);
        append(n);
    }

    def sum() -> int {
        int sum = 0;
        Node c = head;
        while(c.next != 0){
            sum = sum + c.value;
            c = c.next;
        }
        return sum;


    }
}




def main() -> int {
    List l;
    l.constructor();
    l.wrap_append(5);
    l.wrap_append(2);
    return l.sum();
}

class Node [] {
    int value;
    Node next;
}

class List [length] {
    Node head;
    Node tail;
}



def init(List this) -> void{
    Node n;
    this.head = n;
    this.tail = n;
}

def append(List this, int value)-> void {
    Node n;
    this.tail.next = n;
    this.tail = n;
}


def lastValue(List this)-> int {
    return this.tail.value;
}



def main() -> int {
    List l;
    init(l);
    append(l, 1);
    append(l, 5);

    return lastValue(l);
}

def Bool_(int d) -> Bool {
    Bool res;
    if (d == 0) {
        res.data = 0;
    } else {
        res.data = 1;
    }
    return res;
}

def and_(Bool a, Bool b) -> Bool {
    return Bool_(a.data & b.data);
}